# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rQaqSx7ZlKbHCWdkFeKpGWUEDfmqLShX
"""

import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Optimizaci√≥n de Consumo de Combustible", layout="wide")

# --- T√≠tulo principal ---
st.title("üöõ Optimizaci√≥n Inteligente del Consumo de Combustible")
st.markdown("""
Esta aplicaci√≥n muestra los resultados del an√°lisis de **Datasmart-EU** para detectar exceso de consumo y estimar ahorros
potenciales aplicando modelos de optimizaci√≥n log√≠stica.
""")

# --- Cargar datos ---
@st.cache_data
def load_data():
    df = pd.read_csv("consumo_optimizado.csv")
    return df

df = load_data()

st.sidebar.header("Filtros")
vehiculos = st.sidebar.multiselect("Seleccionar veh√≠culos:", df["vehiculo_id"].unique(), default=df["vehiculo_id"].unique())
conductores = st.sidebar.multiselect("Seleccionar conductores:", df["conductor_id"].unique(), default=df["conductor_id"].unique())

df_filtered = df[(df["vehiculo_id"].isin(vehiculos)) & (df["conductor_id"].isin(conductores))]

# --- KPIs principales ---
col1, col2, col3 = st.columns(3)
ahorro_total = df_filtered["ahorro_estimado"].sum()
consumo_total = df_filtered["consumo_pred"].sum()
porcentaje_ahorro = 100 * ahorro_total / consumo_total

col1.metric("Ahorro total estimado (L)", f"{ahorro_total:.2f}")
col2.metric("Consumo total (L)", f"{consumo_total:.2f}")
col3.metric("Reducci√≥n estimada (%)", f"{porcentaje_ahorro:.2f}")

# --- Gr√°fico comparativo ---
st.subheader("üìä Comparativa de Consumo Actual vs Optimizado")
fig = px.line(df_filtered,
              y=["consumo_pred", "consumo_opt"],
              labels={"value": "Litros", "variable": "Tipo de Consumo"},
              title="Consumo Actual vs Optimizado")
st.plotly_chart(fig, use_container_width=True)

# --- Ranking de conductores eficientes ---
st.subheader("üèÅ Ranking de conductores m√°s eficientes")
ranking = (df_filtered.groupby("conductor_id")[["consumo_pred", "consumo_opt"]]
            .mean()
            .assign(ahorro=lambda x: x["consumo_pred"] - x["consumo_opt"])
            .sort_values("ahorro", ascending=False)
            .reset_index())

fig_rank = px.bar(ranking, x="conductor_id", y="ahorro",
                  title="Ahorro medio por conductor (litros)",
                  color="ahorro", color_continuous_scale="Greens")
st.plotly_chart(fig_rank, use_container_width=True)

# --- Tabla de datos ---
st.subheader("üßæ Datos de consumo")
st.dataframe(df_filtered.head(20))

st.info("‚úÖ Consejo: puedes actualizar los CSV con nuevos viajes y la app recalcular√° autom√°ticamente los indicadores.")